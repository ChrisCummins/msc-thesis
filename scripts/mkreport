#!/usr/bin/env bash

## CONFIGURATION.

# Report date format.
date_format="%y-%m-%d"

# Directory to store generated reports.
report_dir="docs/reports"

# Path to the template file.
template="docs/reports/template.md"

# Path to the reading log.
reading_log="docs/ReadingLog.md"

editor="emacsclient -n"

## END OF CONFIGURATION.


# If there is an argument, use that as the report name. Otherwise, use
# the current date.
if [ -n "$1" ]; then
    report_name="$1"
else
    report_name=$(date "+$date_format")
fi

set -eu

# Get the name of the current branch.
current_branch="$(git symbolic-ref HEAD 2>/dev/null)" ||
    current_branch="(unnamed branch)" # detached HEAD
current_branch=${current_branch##refs/heads/}

# If we're already on a report branch, then finish up.
echo "$current_branch" | grep -v '^wip/report-' || {
    report_name=$(echo "$current_branch" | sed 's/^wip\/report-//')
    report="$report_dir/$report_name.md"

    if [ ! -f "$report" ]; then
        echo "Could not find report file '$report'" >&2
        exit 1
    fi

    # Commit weekly report.
    git add "$report"
    git commit -m "docs: Add weekly report"

    git checkout master
    git merge --no-ff "$current_branch"
    git branch -d "$current_branch"
    exit
}

# Report file name.
report="$report_dir/$report_name.md"

# The name of the feature branch.
feature_branch="report-$report_name"

# Check for the presence of $test_file. If it is not found, then
# abort.
test_file="./configure.ac"
if [ ! -f "$test_file" ]; then
    echo "Could not find file '$test_file'." >&2
    echo "Are you running this script from the correct directory?" >&2
    exit 1
fi

# Check for the presence of $reading_log. If it is not found, then
# abort.
if [ ! -f "$reading_log" ]; then
    echo "Could not find the reading log '$reading_log'. Aborting." >&2
    exit 1
fi

git flow feature start $feature_branch

echo "Generating file: '$report'"

# Create the report base on the template, substituting the @NAME@
# placeholder for the report name.
sed "s/@NAME@/$report_name/" "$template" > "$report"

echo "Flushing reading log: '$reading_log'"

# Append the reading log to the end of the report.
sed 's/^# /###### /' "$reading_log" >> "$report"

# Generate a new reading log by stripping out everything by the lines
# beginning with "# ", and inserting blank lines after every line but
# the last.
grep '^# ' "$reading_log" | sed 's/$/\n/' | head -n-1 > "$reading_log".tmp
mv "$reading_log".tmp "$reading_log"

# Stage new changes.
git add "$reading_log"

$editor "$report" &
