#!/usr/bin/env python2.7

from __future__ import print_function
from re import compile,search,sub
from sys import stdout

# Represents a decision tree node. Each node compares an attribute
# against a value, and optionally classifies the instance with a label
# based on the result of the comparison.
class Node:
    def __init__(self, attribute, operator, value, label=None, correct=0, incorrect=0, depth=0):
        self.depth     = depth
        self.attribute = attribute
        self.operator  = operator
        self.value     = value
        self.label     = label
        self.correct   = correct
        self.incorrect = incorrect
        self.total = correct + incorrect
        # Determine the classification accuracy in the range [0,1]
        self.accuracy  = correct / float(self.total) if correct > 0 else 0

    # Generate the code for the node.
    def to_code(self):
        # Generate an indentation of depth.
        def gen_indent(depth):
            indent="  "
            return "".join([indent for i in range(depth + 1)])

        # Generate the decision statement
        code = 'if x[{attr}] {op} {val}:'.format(attr=self.attribute,
                                                 op=self.operator,
                                                 val=self.value)
        # Comment starts off empty.
        comment = "# "

        # If there is a label, set it and the comment.
        if self.label:
            code += ' return {label}'.format(label=self.label)
            # Report the number of correctly and incorrectly classified
            # instances.
            comment += ("{c} correct / {i} incorrect"
                        .format(c=self.correct, i=self.incorrect))
            # Report the classification accuracy.
            if self.total > 0:
                comment += ", {p:.0f}% accurate".format(p=self.accuracy * 100)
            comment += ":"

        # Determine the correct indentation level.
        indent = gen_indent(self.depth)
        # Build the returned string.
        string = indent + code
        # Return the comment only if it is not empty.
        if comment != "# ":
            string = indent + comment + "\n" + string
        return string

# Line format:
#    (|   )*<attribute> <operator> <value>(: <class> \(<correct>/<incorrect>\))?
def parse_line(line):
    # Line format regular expression.
    line_re = compile("^(?P<depth>(\|   )*)"
                      "(?P<attribute>([^<>=]+))"
                      "(?P<operator>(=|<=|>=|<|>))"
                      "(?P<value>([^:]+))"
                      "(: "
                      "(?P<label>([^\(]+))"
                      "\((?P<correct>([^/]+))(/(?P<incorrect>(.+)))?\)"
                      ")?")

    def parse_depth(string):
        depth = 0
        for c in string:
            if c == "|":
                depth += 1
        return depth

    def parse_attribute(string):
        return '"' + string.strip() + '"'

    def parse_operator(string):
        op = string.strip()
        if op == "=": op = "=="
        return op

    def parse_value(string):
        if string != None:
            return '"' + string.strip() + '"'

    def parse_label(string):
        if string != None:
            return tuple([int(x) for x in string.split("x")])

    def parse_int(string):
        if string != None:
            return int(float(string))
        else:
            return 0

    # Set the regex matches.
    match = search(line_re, line)

    # Parse each pattern.
    return Node(parse_attribute(match.group("attribute")),
                parse_operator(match.group("operator")),
                parse_value(match.group("value")),
                parse_label(match.group("label")),
                parse_int(match.group("correct")),
                parse_int(match.group("incorrect")),
                parse_depth(match.group("depth")))

# Read an input file and print a classifier implementation to output
# file.
def gen_classifier(input, output=stdout):
    # Print classifier function definition.
    print("def classify(x):", file=output)

    # Iterate over lines in the input.
    for line in input.readlines():
        node = parse_line(line.rstrip())
        print(node.to_code(), file=output)

# Set the input and output files.
input = open("output")
output = stdout

# Generate the classifier.
gen_classifier(input, output)
