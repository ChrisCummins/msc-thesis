#------------------------------------------------------------------------
# Variables and file lists.
#------------------------------------------------------------------------

CSourceExtension   = .c
CHeaderExtension   = .g

CxxSourceExtension = .cc
CxxHeaderExtension = .h

BitCodeExtension   = .bc
ByteCodeExtension  = .ll
AsmExtension       = .s

# File extension for cpplint tool.
CpplintExtension   = .lint
PlistExtension     = .plist

# Derived file lists.
Sources            = $(sort $(SOURCES))

CSources           = $(wildcard *$(CSourceExtension))
CSourceBaseNames   = $(patsubst %$(CSourceExtension),%,$(CSources))

CHeaders           = $(wildcard *$(CHeaderExtension))
CHeaderBaseNames   = $(patsubst %$(CHeaderExtension),%,$(CHeaders))

CAll               = $(CSources) $(CHeaders)

CxxSources         = $(wildcard *$(CxxSourceExtension))
CxxSourceBaseNames = $(patsubst %$(CxxSourceExtension),%,$(CxxSources))

CxxHeaders         = $(wildcard *$(CxxHeaderExtension))
CxxHeaderBaseNames = $(patsubst %$(CxxHeaderExtension),%,$(CxxHeaders))

CxxAll             = $(CxxSources) $(CxxHeaders)

# Empty clean list to append to.
MOSTLYCLEANFILES =

# Empty list of targets to make phony.
PhonyTargets =

#------------------------------------------------------------------------
# General configuration settings and gumpf.
#------------------------------------------------------------------------

# Build in parallel by default, by executing with make flag -j(n+1),
# where n is the number of logical processors, reported by nproc.
NumberOfThreads = $(shell echo $(NUM_PROC) + 1 | bc)
MAKEFLAGS = "-j $(NumberOfThreads)"

# Set phony targets.
.PHONY: $(PhonyTargets)

#------------------------------------------------------------------------
# Static analysis of C and C++ files.
#------------------------------------------------------------------------

# The clang static analyser generates .plist files.
CPlists           = $(addsuffix $(PlistExtension),$(CSources) $(CHeaders))
CxxPlists         = $(addsuffix $(PlistExtension),$(CxxSources) $(CxxHeaders))
Plists            = $(CPlists) $(CxxPlists)
MOSTLYCLEANFILES += $(Plists)

# Explicit targets for static analysis.
$(CPlists): %$(PlistExtension): %
	@if ! $(AM_V_P); then echo '  CSA      $<'; fi
	$(AM_V_at)$(call create-c-plist,$<,$@)

$(CxxPlists): %$(PlistExtension): %
	@if ! $(AM_V_P); then echo '  CXXSA    $<'; fi
	$(AM_V_at)$(call create-cxx-plist,$<,$@)

# Functions for generating plist files.
define create-c-plist
	$(COMPILE) --analyze $1 -o $2;
endef

define create-cxx-plist
	$(CXXCOMPILE) -xc++ --analyze $1 -o $2;
endef

#------------------------------------------------------------------------
# Style checking C++ files.
#------------------------------------------------------------------------

# The cpplint script checks an input source file and enforces the
# style guidelines set out in:
#
#   http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml
#
if HAVE_CPPLINT

Cpplints          = $(addsuffix $(CpplintExtension),$(CxxSources) $(CxxHeaders))
MOSTLYCLEANFILES += $(Cpplints)

# Arguments to --filter flag for cpplint.
CpplintFilters = -legal,-build/c++11,-readability/streams,-readability/todo

# Explicit target for cpplint:
$(Cpplints): %$(CpplintExtension): %
	@if ! $(AM_V_P); then echo '  CPPLINT  $<'; fi
	$(AM_V_at)$(call cpplint,$<,$@)

# Function for generating lint files.
define cpplint
	$(CPPLINT) --filter=$(CpplintFilters) $1 2>&1	 		\
		| grep -v '^Done processing\|^Total errors found: ' 	\
		| tee $2
endef

else
# If we don't have cpplint then just define an empty function so that
# we can safely call cpplint whether or not we have the cpplint
# package available.
define cpplint
	true
endef
endif

#------------------------------------------------------------------------
# Generating LLVM IR bytecode.
#------------------------------------------------------------------------

# If we have clang available, then we emit LLVM bytecode in addition
# to native object files. This bytecode isn't used by any other stage
# of the compilation process, but is intended primarily for
# informative purposes and to aid in debugging.

# Generate bytecode files with .ll extension.
CByteCodes        = $(addsuffix $(ByteCodeExtension),$(CSourceBaseNames))
CxxByteCodes      = $(addsuffix $(ByteCodeExtension),$(CxxSourceBaseNames))
ByteCodes         = $(CByteCodes) $(CxxByteCodes)
MOSTLYCLEANFILES += $(ByteCodes)

#------------------------------------------------------------------------
# Generating LLVM bitcode.
#------------------------------------------------------------------------

# The compilation process translates sources first into LLVM bitcode,
# before translating these bitcode files to native object files.

# Generate bitcode files with .ll extension.
CBitCodes         = $(addsuffix $(BitCodeExtension),$(CSourceBaseNames))
CxxBitCodes       = $(addsuffix $(BitCodeExtension),$(CxxSourceBaseNames))
BitCodes          = $(CBitCodes) $(CxxBitCodes)
MOSTLYCLEANFILES += $(BitCodes)

#------------------------------------------------------------------------
# Generating native assembly sources.
#------------------------------------------------------------------------

# We generate native assembly code for all input sources. This is for
# debugging and informative purposes, it is not required as part of
# the compilation process.
CAsmFiles         = $(addsuffix $(AsmExtension),$(CSourceBaseNames))
CxxAsmFiles       = $(addsuffix $(AsmExtension),$(CxxSourceBaseNames))
GeneratedAsmFiles = $(CAsmFiles) $(CxxAsmFiles)
MOSTLYCLEANFILES += $(GeneratedAsmFiles)

# Functions for generating asm files.
define emit-c-asm
	$(CC) -S -o $2 $1
endef

define emit-cxx-asm
	$(CXX) -S -o $2 $1
endef

#------------------------------------------------------------------------
# Compiling C++ object files.
#------------------------------------------------------------------------

# Generate static analysis and linter files as a part of regular
# compilation.
all-local: $(Plists) $(Cpplints)

# Automake doesn't support extending the built-in rules, so we have to
# override the default with our own. The first two lines are adapted
# from the built-in the rule. We then hook in our custom build logic
# after this, generating additional source listings and performing
# static analysis and linting.
%.o: %.cc etags
	$(AM_V_CXX)$(CXXCOMPILE) -emit-llvm -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c $< -o $*$(BitCodeExtension)
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
if ENABLE_MEMORY_COUNTER
	$(AM_V_at)$(OPT) -load $(LLVM_BUILD_PATH)/lib/LLVMMemoryCounter.so -memorycounter < $*$(BitCodeExtension) > $*$(BitCodeExtension).out
	$(AM_V_at)mv $*$(BitCodeExtension).out $*$(BitCodeExtension)
endif
	$(AM_V_at)$(LLVM_DIS) $*$(BitCodeExtension) -o $*$(ByteCodeExtension)
	$(AM_V_at)$(CXX) -c $*$(BitCodeExtension) -o $@
	$(AM_V_at)$(CXX) -emit-llvm -S $*$(BitCodeExtension) -o $*$(ByteCodeExtension)
	$(AM_V_at)$(call emit-cxx-asm,      $*$(BitCodeExtension), $*$(AsmExtension))
	$(AM_V_at)$(call create-cxx-plist,  $<, $<$(PlistExtension))
	$(AM_V_at)$(call cpplint,           $<, $<$(CpplintExtension))

#------------------------------------------------------------------------
# Generating TAGS files for C and C++ sources.
#------------------------------------------------------------------------
etags: TAGS

TAGS: $(CAll) $(CxxAll)
	$(AM_V_at)etags $^

MOSTLYCLEANFILES += TAGS

#------------------------------------------------------------------------
# Show TODO and FIXME annotations in sources.
#------------------------------------------------------------------------
PhonyTargets += todo-local fixme-local

# The "todo" and "fixme" targets search the available source files for
# use of the TODO: or FIXME: tags.
todo-local fixme-local:
	$(AM_V_at)test -z "$(Sources)" \
		|| $(EGREP) -in '(todo|fixme):' $(Sources) || true
