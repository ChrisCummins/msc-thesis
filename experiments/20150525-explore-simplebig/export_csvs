#!/usr/bin/env python2

import csv
import itertools

import labm8
from labm8 import io
from labm8 import fs
from labm8 import math as labmath

import omnitune
from omnitune import skelcl

import experiment


def get_info(db, values):
    """
    For a given set of values, return a list of (wg, sample_count)
    tuples. If a wg is greater than the max_wg_size, sample_count is
    -1.
    """
    where = []

    for i in range(len(values)):
        key = skelcl.RUNTIMES_TABLE[i][0]
        val = db.escape_value("runtimes", i, values[i])
        where.append('{key} = {val}'.format(key=key, val=val))
    where = " AND ".join(where)

    sample_counts, runtimes = [], []
    for wg in itertools.product(skelcl.WG_VALUES, skelcl.WG_VALUES):

        max_wg_size = values[-1]
        wg_where = " AND wg_c={c} AND wg_r={r}".format(c=wg[0], r=wg[1])

        if wg[0] * wg[1] > max_wg_size:
            runtime = 0
            count = -1
        else:
            runtimes = []
            query = db.execute("SELECT runtime FROM runtimes WHERE " +
                               where + wg_where)
            for runtime in query:
                runtimes.append(runtime[0])
            runtime = labmath.mean(runtimes)
            count = len(runtimes)

        sample_counts.append(count)
        runtimes.append(runtime)
        io.debug(wg, count, runtime)

    return sample_counts, runtimes


def main():
    db = skelcl.SkelCLDatabase(fs.path(experiment.DATABASE_ROOT,
                                       experiment.DATABASE_ORACLE))

    scenario_keys = [x[0] for x in skelcl.RUNTIMES_TABLE[:-3]]

    io.info("Database contains",
            db.execute("select count(*) from runtimes").fetchone()[0],
            "runtimes.")

    scenarios = db.execute("SELECT DISTINCT " + ",".join(scenario_keys) +
                           " FROM runtimes")

    wgs = itertools.product(skelcl.WG_VALUES, skelcl.WG_VALUES)
    wg_keys = [str(x[0]) + "x" + str(x[1]) for x in list(wgs)]

    header = scenario_keys + wg_keys

    samplecounts_csv = open('csv/samplecounts.csv', 'wb')
    runtimes_csv = open('csv/runtimes.csv', 'wb')

    samplecounts_writer = csv.writer(samplecounts_csv)
    samplecounts_writer.writerow(header)

    runtimes_writer = csv.writer(runtimes_csv)
    runtimes_writer.writerow(header)

    for row in scenarios:
        samples, runtimes = get_info(db, row)

        samplecounts_writer.writerow(list(row) + samples)
        runtimes_writer.writerow(list(row) + runtimes)


if __name__ == "__main__":
    main()
