#!/usr/bin/env python2
from __future__ import division
from __future__ import print_function

import re

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from matplotlib.ticker import FormatStrFormatter

import labm8 as lab
from labm8 import fs
from labm8 import io
from labm8 import latex
from labm8 import system
from labm8 import math as labmath

import omnitune
from omnitune import skelcl
from omnitune.skelcl import db as _db


#################
# Export tables #
#################
def create_devices_table(db, output=None):
    output = output or open("gen/tables/devices.tex", "wb")
    infos = set()
    for row in db.execute("SELECT name,count,max_compute_units,"
                          "max_clock_frequency,local_mem_size,"
                          "global_mem_size,max_work_group_size "
                          "FROM device_features"):
        name,count,cunits,freq,lmem,gmem,max_wg = row
        infos.add((count, name.strip(), cunits, freq,
                   labmath.ceil(lmem / 1024), labmath.ceil(gmem / 1024 / 1024),
                   max_wg))

    infos = list(sorted(infos, key=lambda x: x[1]))
    latex.write_table_body(infos, output=output,
                           headers=(
                               "Device count",
                               "Name",
                               "Compute units",
                               "Frequency (Hz)",
                               "Local Memory Size (KB)",
                               "Global Memory Size (MB)",
                               "Max workgroup size"
                           ))


def create_kernels_table(db, output=None):
    def _process_row(row):
        def _process_kernel(kernel):
            north,south,east,west = db.execute("SELECT north,south,east,west "
                                               "FROM kernels WHERE id=?",
                                               (kernel,)).fetchone()
            instcount = db.execute("SELECT instruction_count FROM "
                                   "kernel_features where id=?",
                                   (kernel,)).fetchone()[0]
            return name, north, south, east, west, instcount

        name = row[0]
        kernels = db.execute("SELECT id from kernel_names where name=?", (name,)).fetchall()
        return [_process_kernel(row[0]) for row in kernels]

    output = output or open("gen/tables/kernels.tex", "wb")
    synthetics, real = set(), set()
    for row in db.execute("SELECT DISTINCT name FROM kernel_names WHERE synthetic=1"):
        [synthetics.add(entry) for entry in _process_row(row)]
    for row in db.execute("SELECT DISTINCT name FROM kernel_names WHERE synthetic=0"):
        [real.add(entry) for entry in _process_row(row)]

    synthetics = list(sorted(synthetics, key=lambda x: x[0]))
    real = list(sorted(real, key=lambda x: x[0]))

    latex.write_table_body(synthetics + real, output=output,
                           headers=("Name", "North", "South", "East",
                                    "West", "Instruction Count"))

def create_datasets_table(db, output=None):
    output = output or open("gen/tables/datasets.tex", "wb")
    headers = "Width", "Height", "Type in", "Type out"
    infos = set(row for row in
                db.execute("SELECT width,height,tin,tout "
                           "FROM dataset_features"))

    data = list(sorted(infos, key=lambda x: x[0]))
    latex.write_table_body(data, output=output, headers=headers)


################
# Export plots #
################
heatmap_size=(3.28, 2.7)
def create_oracle_wgsizes_heatmap(db):
    space = db.oracle_param_space()
    space.heatmap("gen/img/oracle_param_space.png", figsize=heatmap_size,
                  cmap="Reds")


def create_max_wgsizes_heatmap(db):
    space = db.max_wgsize_space()
    space.heatmap("gen/img/max_wgsizes.png", figsize=heatmap_size,
                  cmap="Blues")


def create_num_params_oracle_graph(db):
    freqs = db.oracle_param_frequencies(normalise=True)

    # Calculate accumulated % of oracle.
    acc, _acc = [], 0
    for _,freq in reversed(freqs):
        _acc += freq * 100
        acc.append(_acc)

    X = np.arange(len(acc))
    plt.plot(X, acc)
    plt.xlim(xmin=0, xmax=len(X) - 1)
    plt.ylim(ymin=0, ymax=100)
    plt.xlabel("Number of unique workgroup sizes")
    plt.ylabel("% of oracle accuracy")
    plt.gca().yaxis.set_major_formatter(FormatStrFormatter('%d%%'))
    plt.gcf().set_size_inches(6, 2.5, dpi=300)
    plt.tight_layout()
    plt.savefig("gen/img/num_param_oracle.png")
    plt.close()


def create_params_summary_plot(db):
    summary = db.params_summary()
    X = np.arange(len(summary))
    Performance = [t[1] * 100 for t in summary]
    Coverage = [t[2] * 100 for t in summary]
    ax = plt.subplot(111)
    ax.plot(X, Performance, 'b', label="Performance")
    ax.plot(X, Coverage, 'g', label="Legality")
    plt.gca().yaxis.set_major_formatter(FormatStrFormatter('%d%%'))
    plt.ylabel("Performance / Legality")
    plt.xlim(xmin=0, xmax=len(X) - 1)
    plt.ylim(ymin=0, ymax=100)
    plt.tick_params(
        axis='x',          # changes apply to the x-axis
        which='both',      # both major and minor ticks are affected
        bottom='off',      # ticks along the bottom edge are off
        top='off',         # ticks along the top edge are off
        labelbottom='off') # labels along the bottom edge are off
    plt.tight_layout()
    plt.legend(loc=4) # legend in bottom right
    plt.gcf().set_size_inches(6, 2.5, dpi=300)
    plt.savefig("gen/img/params_summary.png")
    plt.close()


##################
# Dynamic values #
##################
def create_dynamic_values(db):
    # Parameter counts.
    param_counts = db.num_params_for_scenarios().values()
    system.echo(int(round(labmath.mean(param_counts))), "gen/num_avg_params.tex")
    system.echo(max(param_counts), "gen/num_max_params.tex")

    system.echo(db.num_rows("runtime_stats"), "gen/num_runtime_stats.tex")
    system.echo(db.num_rows("runtimes"), "gen/num_runtimes.tex")
    system.echo(db.num_rows("scenarios"), "gen/num_scenarios.tex")
    system.echo(int(round(db.mean_samples)), "gen/num_avg_samples.tex")


########
# Main #
########
def main():
    db = _db.Database("~/data/msc-thesis/oracle.db")

    fs.rm("gen")
    fs.mkdir("gen/img")
    fs.mkdir("gen/tables")

    # Set plot style.
    sns.set_context("notebook", font_scale=.8, rc={"lines.linewidth": 2})

    # Dynamic values.
    create_dynamic_values(db)

    # Tables.
    create_devices_table(db)
    create_kernels_table(db)
    create_datasets_table(db)

    # Figures.
    create_oracle_wgsizes_heatmap(db)
    create_max_wgsizes_heatmap(db)
    create_num_params_oracle_graph(db)
    create_params_summary_plot(db)


if __name__ == "__main__":
    main()
