#!/usr/bin/env python2.7
#
# e12 - Tuning stencil applications by changine the Stenicl skeleton
# local size.
#
from __future__ import print_function
from itertools import product
from copy import copy
from operator import mul

from benchlib import *
from skelcl import *
from util import *

import config

allpairsCRS =  {
    "hosts": [ "florence", "cec", "dhcp-90-060", "whz5", "tim", "monza" ],
    "benchmarks": {
        "GameOfLife": {
            "args": {
                "Iterations": ["-i 10"],
                "Size": ["--size 1024"]
            }
        },
        "HeatEquation": {
            "args": {
                "Iterations": ["-i 10"],
                "Size": ["--size 1024"]
            }
        },
        "CannyEdgeDetection": {
                "args": {
                    "Input": ["--input {base}/{file}".format(base=IMG, file="4160x3120.pgm")]
                }
        },
        "GaussianBlur": {
            "args": {
                "Input": ["--input {base}/{file}".format(base=IMG, file="4160x3120.pgm")]
            }
        },
    },
    "args": {},
    "knobs": {
        StencilLocalSizeR: [  8,  16,  32,  64, 128, 256],
        StencilLocalSizeC: [  2,   4,   8,  16,  32,  64]
    }
}

# Check that values are legal.
def knobvaluesarelegal(host, devargs, knobs):
    # Get the available devices.
    cpus, gpus = host.getDevices()

    # Calculate the workgroup size.
    workgroupsize = reduce(mul, [x.val for x in knobs], 1)

    # Set the target devices.
    devices = gpus if search("GPU", devargs[0].val) else cpus

    # Find the smallest max work group size from those devices.
    maxWorkGroupSize = min([x["max_work_group_size"] for x in devices])
    return maxWorkGroupSize >= workgroupsize

def instantiate(host, benchmark, args, knobs):
    sampler = FixedSizeSampler(5)
    harnesses = []

    for devargs in host.devargs():
        if knobvaluesarelegal(host, devargs, knobs):
            c = SkelCLTestCase(benchmark, host=host,
                               invars=knobs + args + devargs)
            harnesses.append(TestHarness(c, sampler))

    return harnesses

HARNESSES = enumerateHarnesses(allpairsCRS, instantiate)

q = jobqueue(HARNESSES)

runJobQueue(q)

# Headless servers stop here.
if not masterhost(): exit(0)

####### DATA PROCESSING

from re import sub

from stats import *

import plot as plt

ALLSPEEDUPS = []

# Create table and visualisations
GROUPEDTESTS = {}
SPEEDUPS = {}

for harness in HARNESSES:
    invars = harness.testcase.invars
    host = lookup1(invars, Hostname)
    benchmark = lookup1(invars, "Benchmark")
    benchmark = lookup1(invars, BenchmarkName)
    dev = getdeviceargs(invars)

    key = "-".join([str(x.val) for x in [host, benchmark] + dev])

    if len(harness.result().outvars):
        if key not in GROUPEDTESTS:
            GROUPEDTESTS[key] = []
            SPEEDUPS[key] = []

        GROUPEDTESTS[key].append(harness)

def gettime(result):
    inittimes, buildtimes, preptimes, ultimes, skeltimes, swaptimes, dltimes = gettimes(result.outvars)
    return describe(skeltimes)

def getworkgroupsize(invars):
    return (lookup1(invars, StencilLocalSizeR),
            lookup1(invars, StencilLocalSizeC))

def setworkgroupsize(invars, *newWgSize):
    newinvars = copy(invars)

    # Lookup existing CRS value.
    workgroupsize = getworkgroupsize(newinvars)

    # Remove existing CRS value(s).
    [newinvars.remove(x for x in workgroupsize)]
    [newinvars.append(x for x in newWgSize)]

    return newinvars

for key in GROUPEDTESTS:
    harnesses = GROUPEDTESTS[key]
    speedups = SPEEDUPS[key]

    for harness in harnesses:
        invars = harness.testcase.invars

        workgroupvars = getworkgroupsize(invars)
        workgroup = [x.val for x in workgroupvars]

        # Set the baseline value.
        baselineinvars = setworkgroupsize(invars,
                                          StencilLocalSizeR(StencilLocalSizeR.DEFAULT),
                                          StencilLocalSizeC(StencilLocalSizeC.DEFAULT))

        result = resultscache.load(invars)
        baselineresult = resultscache.load(baselineinvars)

        if (baselineresult.bad or result.bad or
            not len(baselineresult.outvars) or not len(result.outvars)):
            # Skip if we don't have data.
            continue

        time = gettime(result)
        baseline = gettime(baselineresult)

        speedup = baseline[0] / time[0]
        err = abs((baseline[0] / sum(time)) - speedup)

        iterations = sum([len(result.outvars), len(baselineresult.outvars)]) / 2
        speedups.append((crs, (speedup, err), iterations))

    ALLSPEEDUPS += speedups

    # Plot results
    hostname = lookup1(harnesses[0].testcase.invars, Hostname)
    benchmark = lookup1(harnesses[0].testcase.invars, "Benchmark")
    devtArg = lookup1(harnesses[0].testcase.invars, DeviceTypeArg)
    if search("GPU", devtArg.val):
        devCArg = lookup1(harnesses[0].testcase.invars, DeviceCountArg)

    # Human-readable device string.
    dt = "GPU" if search("GPU", devtArg.val) else "CPU"
    if dt == "GPU":
        dt = "{n}x ".format(n=search('([0-9]+)', devCArg.val).group(1)) + dt

    name = "{host}-{dev}-{app}".format(
        host=hostname.val,
        dev=sub(" ", "", dt),
        app=benchmark
    )


    Labels = [",".join([str(s) for s in x[0]]) for x in speedups]
    Y = [x[1][0] for x in speedups]
    Err = [x[1][1] for x in speedups]
    Iterations = sum([x[2] for x in speedups]) / len(speedups)

    caption = "Average {n:.1f} iterations.".format(n=Iterations)
    baseline = 0

    kwargs = {
        "title": benchmark + ": " + ", ".join([str(x) for x in [
            hostname.val,
            dt
        ]]),
        "xlabel": "C,R,S Paramater values",
        "labels": Labels,
        "err": Err,
        "baseline": baseline,
        "caption": caption,
        "path": path(config.RESULTS, config.ID, name + ".png")
    }

    plt.speedups(Y, **kwargs)

ALLPOSITIVESPEEDUPS = [x for x in ALLSPEEDUPS if x[1][0] >= 1]
if len(ALLPOSITIVESPEEDUPS):
    print("MAXIMUM SPEEDUP:", max([x[1][0] for x in ALLPOSITIVESPEEDUPS]),
          "AVERAGE SPEEDUP:", sum([x[1][0] for x in ALLPOSITIVESPEEDUPS]) / float(len(ALLPOSITIVESPEEDUPS)),
          "NUMBER OF SPEEDUPS:", len(ALLPOSITIVESPEEDUPS))

# Graph event times.
[plt.openCLEventTimes(x.testcase.invars) for x in HARNESSES]

exit(0)
