#!/usr/bin/env python2.7

from __future__ import print_function

from benchlib import *
from skelcl import *
from variables import *
from util import *
from stats import *

import resultscache
import config

jobdesc =  {
    "hosts": [ "cec" ],
    "benchmarks": {
        "GameOfLife": {
            "args": {
                "Size": ["--size 4096"],
                "Iterations": ["-i 25"]
            }
        }
    },
    "args": {},
    "knobs": {}
}

def instantiate(host, benchmark, args, knobs):
    sampler = FixedSizeSampler(30)
    harnesses = []

    for devargs in host.devargs():
        mo = [Argument("MapOverlap", "--map-overlap")]
        c1 = SkelCLTestCase(benchmark, host=host,
                            invars=knobs + args + devargs)
        c2 = SkelCLTestCase(benchmark, host=host,
                            invars=knobs + args + mo + devargs)

        harnesses += [TestHarness(c, sampler) for c in [c1, c2]]

    return harnesses

def mapOverlapVsStencil():
    return enumerateHarnesses(jobdesc, instantiate)

HARNESSES = mapOverlapVsStencil()

q = jobqueue(HARNESSES)

runJobQueue(q)

# Headless servers stop here.
if not masterhost(): exit(0)

####### DATA PROCESSING

from re import sub,search

from stats import *

import plot as plt

# Graph event times.
[plt.openCLEventTimes(x.testcase.invars) for x in HARNESSES]

def analyse(harness):
    invars = harness.testcase.invars
    result = resultscache.load(invars)
    samples = gettimes(result.outvars)
    s = summarise(*samples)

    elapsedtimes = [float(lookup1(x, ElapsedTimes).val[0])
                    for x in result.outvars]
    elapsedtotal = sum(elapsedtimes) / len(elapsedtimes)

    et = describe(elapsedtimes)

    r = [x for x in s if not search("(init|build|upload)", x[0])]
    total = sum([x[1][0] for x in r])

    print("DATA:", resultscache.resultspath(invars))
    print("INVARS:", invars)
    print("ELAPSED:", elapsedtotal)
    print("MEASURED:", total)
    print("DIFFERENCE:", ((elapsedtotal - total) / elapsedtotal)*100, "%")
    print()

[analyse(x) for x in HARNESSES]

#
exit(0)
