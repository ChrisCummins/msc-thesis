#!/usr/bin/env python2.7
#
# e13 - Tuning number of iterations between swaps for iterative
# Stencil applications on multi-GPUs.
#
from __future__ import print_function
from itertools import product
from copy import copy
from operator import mul

from benchlib import *
from skelcl import *
from util import *

import config

jobdesc =  {
    "hosts": [ "tim" ],
    "benchmarks": {
        "GameOfLife": {
            "args": {
		"Iterations": ["-i {i}".format(i=i) for i in [100]],
                "Swaps": ["-S {i}".format(i=i) for i in range(1, 5)]
            }
        },
        "HeatEquation": {
            "args": {
	    	"Iterations": ["-i {i}".format(i=i) for i in [100]],
                "Swaps": ["-S {i}".format(i=i) for i in range(1, 5)]
            }
        }
    },
    "args": {},
    "knobs": {}
}

def instantiate(host, benchmark, args, knobs):
    sampler = FixedSizeSampler(5)
    harnesses = []

    for devargs in host.devargs():
        c = SkelCLTestCase(benchmark, host=host,
                           invars=knobs + args + devargs)
        harnesses.append(TestHarness(c, sampler))

    return harnesses

HARNESSES = enumerateHarnesses(jobdesc, instantiate)

q = jobqueue(HARNESSES)

runJobQueue(q)

# Headless servers stop here.
if not masterhost(): exit(0)

####### DATA PROCESSING

from re import sub

from stats import *

import plot as plt

# ALLSPEEDUPS = []

# # Create table and visualisations
# GROUPEDTESTS = {}
# SPEEDUPS = {}

# for harness in HARNESSES:
#     invars = harness.testcase.invars
#     host = lookup1(invars, Hostname)
#     benchmark = lookup1(invars, "Benchmark")
#     dev = getdeviceargs(invars)

#     key = "-".join([str(x.val) for x in [host, benchmark] + dev])

#     if len(harness.result().outvars):
#         if key not in GROUPEDTESTS:
#             GROUPEDTESTS[key] = []
#             SPEEDUPS[key] = []

#         GROUPEDTESTS[key].append(harness)

# def gettime(result):
#     inittimes, buildtimes, preptimes, ultimes, skeltimes, swaptimes, dltimes = gettimes(result.outvars)
#     return describe(skeltimes)

# def getworkgroupsize(invars):
#     return (lookup1(invars, StencilLocalSizeR),
#             lookup1(invars, StencilLocalSizeC))

# def setworkgroupsize(invars, *newWgSize):
#     newinvars = copy(invars)

#     # Lookup existing values.
#     workgroupsize = getworkgroupsize(newinvars)

#     # Remove existing value(s).
#     [newinvars.remove(x) for x in workgroupsize]
#     [newinvars.append(x) for x in newWgSize]

#     return newinvars

# def getBaselineIndex(speedups):
#     for i in range(len(speedups)):
#         workgroupsize = speedups[i][0]

#         if (workgroupsize[0] == StencilLocalSizeR.DEFAULT and
#             workgroupsize[1] == StencilLocalSizeC.DEFAULT):
#             return i

# for key in GROUPEDTESTS:
#     harnesses = GROUPEDTESTS[key]
#     speedups = SPEEDUPS[key]

#     for harness in harnesses:
#         invars = harness.testcase.invars

#         workgroupvars = getworkgroupsize(invars)
#         workgroup = [x.val for x in workgroupvars]

#         # Set the baseline value.
#         baselineinvars = setworkgroupsize(invars,
#                                           StencilLocalSizeR(StencilLocalSizeR.DEFAULT),
#                                           StencilLocalSizeC(StencilLocalSizeC.DEFAULT))

#         result = resultscache.load(invars)
#         baselineresult = resultscache.load(baselineinvars)

#         if (baselineresult.bad or result.bad or
#             not len(baselineresult.outvars) or not len(result.outvars)):
#             # Skip if we don't have data.
#             continue

#         time = gettime(result)
#         baseline = gettime(baselineresult)

#         speedup = baseline[0] / time[0]
#         err = abs((baseline[0] / sum(time)) - speedup)

#         iterations = sum([len(result.outvars), len(baselineresult.outvars)]) / 2
#         speedups.append((workgroup, (speedup, err), iterations))

#     # Nothing to plot.
#     if not len(speedups):
#         continue

#     ALLSPEEDUPS += speedups

#     # Plot results
#     hostname = lookup1(harnesses[0].testcase.invars, Hostname)
#     benchmark = lookup1(harnesses[0].testcase.invars, "Benchmark")
#     devtArg = lookup1(harnesses[0].testcase.invars, DeviceTypeArg)
#     if search("GPU", devtArg.val):
#         devCArg = lookup1(harnesses[0].testcase.invars, DeviceCountArg)

#     # Human-readable device string.
#     dt = "GPU" if search("GPU", devtArg.val) else "CPU"
#     if dt == "GPU":
#         dt = "{n}x ".format(n=search('([0-9]+)', devCArg.val).group(1)) + dt

#     name = "{host}-{dev}-{app}".format(
#         host=hostname.val,
#         dev=sub(" ", "", dt),
#         app=benchmark.val
#     )

#     Labels = ["[{r}x{c}]".format(r=x[0][0], c=x[0][1]) for x in speedups]
#     Y = [x[1][0] for x in speedups]
#     Err = [x[1][1] for x in speedups]
#     Iterations = sum([x[2] for x in speedups]) / len(speedups)

#     caption = "Average {n:.1f} iterations.".format(n=Iterations)
#     baseline = getBaselineIndex(speedups)

#     kwargs = {
#         "title": benchmark.val + ": " + ", ".join([str(x) for x in [
#             hostname.val,
#             dt
#         ]]),
#         "xlabel": "Stencil Skeleton work group size",
#         "labels": Labels,
#         "err": Err,
#         "baseline": baseline,
#         "caption": caption,
#         "path": path(config.RESULTS, config.ID, name + ".png")
#     }

#     plt.speedups(Y, **kwargs)

# ALLPOSITIVESPEEDUPS = [x for x in ALLSPEEDUPS if x[1][0] >= 1]
# if len(ALLPOSITIVESPEEDUPS):
#     print("MAXIMUM SPEEDUP:", max([x[1][0] for x in ALLPOSITIVESPEEDUPS]),
#           "AVERAGE SPEEDUP:", sum([x[1][0] for x in ALLPOSITIVESPEEDUPS]) / float(len(ALLPOSITIVESPEEDUPS)),
#           "NUMBER OF SPEEDUPS:", len(ALLPOSITIVESPEEDUPS))

# Graph event times.
[plt.openCLEventTimes(x.testcase.invars) for x in HARNESSES]

exit(0)
