#!/usr/bin/env python2.7
#
# e13 - Tuning number of iterations between swaps for iterative
# Stencil applications on multi-GPUs.
#
from __future__ import print_function
from itertools import product
from copy import copy
from operator import mul

from benchlib import *
from skelcl import *
from util import *

import config

class SimpleBigKnob(Knob):
    cxxSrc = path(SKELCL, 'examples/SimpleBig/main.cpp')
    clSrc = path(SKELCL, 'examples/SimpleBig/kernels.cl')

class BorderSize(SimpleBigKnob):
    def __init__(self, val):
        SimpleBigKnob.__init__(self, "BorderSize", val)

    def set(self, **kwargs):
        os.system("sed -r -i 's/(define NORTH) [0-9]+/\\1 {val}/' {path}"
                  .format(val=self.val[0], path=self.cxxSrc))
        os.system("sed -r -i 's/(define WEST) [0-9]+/\\1 {val}/' {path}"
                  .format(val=self.val[1], path=self.cxxSrc))
        os.system("sed -r -i 's/(define SOUTH) [0-9]+/\\1 {val}/' {path}"
                  .format(val=self.val[2], path=self.cxxSrc))
        os.system("sed -r -i 's/(define EAST) [0-9]+/\\1 {val}/' {path}"
                  .format(val=self.val[3], path=self.cxxSrc))

jobdesc =  {
    "hosts": [ "florence", "cec", "dhcp-90-060", "whz5", "tim", "monza" ],
    "benchmarks": {
        "SimpleBig": {
            "args": {
                "Size": ["-w {w} -h {h}".format(w=x[0], h=x[1]) for x in [
                    [1024, 1024],
                    [2048, 2048]
                ]],
                "Complexity": ["", "--complex"]
            }
        }
    },
    "args": {},
    "knobs": {
        BorderSize: [
            [ 1,  1,  1,  1],
            [ 5,  5,  5,  5],
            [10, 10, 10, 10],
            [20, 20, 20, 20],
            [30, 30, 30, 30],
            [ 1, 10, 30, 30],
            [20, 10, 20, 10]
        ],
        StencilLocalSizeC: [4, 32, 64],
        StencilLocalSizeR: [4, 32, 64]
    }
}

# Check that values are legal.
def knobvaluesarelegal(host, devargs, knobs):
    # Get the available devices.
    cpus, gpus = host.getDevices()

    # Calculate the workgroup size.
    wg = [lookup1(knobs, StencilLocalSizeC).val,
          lookup1(knobs, StencilLocalSizeR).val]
    workgroupsize = wg[0] * wg[1]

    # Determine the target device.
    devices = gpus if search("GPU", devargs[0].val) else cpus

    # Find the smallest max work group size from those devices.
    hardwareMaxWorkGroupSize = min([x["max_work_group_size"] for x in devices])

    # Detmine whethe the proposed work group size is smaller than the
    # hardware enforced maximum.
    return hardwareMaxWorkGroupSize >= workgroupsize

def instantiate(host, benchmark, args, knobs):
    sampler = FixedSizeSampler(10)
    harnesses = []

    for devargs in host.devargs():
        if knobvaluesarelegal(host, devargs, knobs):
            c = SkelCLTestCase(benchmark, host=host,
                               invars=knobs + args + devargs)
            harnesses.append(TestHarness(c, sampler))

    return harnesses

HARNESSES = enumerateHarnesses(jobdesc, instantiate)

q = jobqueue(HARNESSES)

runJobQueue(q)

# Headless servers stop here.
if not masterhost(): exit(0)

####### DATA PROCESSING

from re import sub

from stats import *

import plot as plt

def getworkgroupsize(invars):
    return (lookup1(invars, StencilLocalSizeC),
            lookup1(invars, StencilLocalSizeR))

def setworkgroupsize(invars, *newWgSize):
    newinvars = copy(invars)

    # Lookup existing values.
    workgroupsize = getworkgroupsize(newinvars)

    # Remove existing value(s).
    [newinvars.remove(x) for x in workgroupsize]
    [newinvars.append(x) for x in newWgSize]

    return newinvars

def gettime(result):
    inittimes, buildtimes, preptimes, ultimes, skeltimes, swaptimes, dltimes = gettimes(result.outvars)
    return describe(skeltimes)

def humanReadableDeviceString(invars):
    s = ""

    deviceType = lookup1(invars, DeviceTypeArg).val

    if search("GPU", deviceType):
        # Get the --device-count argument.
        deviceCountArg = lookup1(invars, DeviceCountArg).val
        # Get the numerical count.
        deviceCount = search('([0-9]+)', deviceCountArg).group(1)
        return "{count}xGPU".format(count=deviceCount)
    else:
        return "CPU"

# Plot speedups of kernel for a fixed Device and Kernel type.
def plotSpeedupsForDeviceAndWorkGroup(harnesses):
    speedups = [lookup1(x.result().couts, Speedup).val for x in harnesses]
    borders = [lookup1(x.testcase.invars, BorderSize).val for x in harnesses]
    complexities = [lookup1(x.testcase.invars, "Complexity").val for x in harnesses]

    # Constants across all harnesses:

    hostname = lookup1(harnesses[0].testcase.invars, Hostname).val
    devicename = humanReadableDeviceString(harnesses[0].testcase.invars)

    iterations = sum([x[2] for x in speedups]) / len(speedups)

    # Work group size.
    workgroup = [
        lookup1(harnesses[0].testcase.invars, StencilLocalSizeC).val,
        lookup1(harnesses[0].testcase.invars, StencilLocalSizeR).val
    ]

    # Unique plot ID.
    plotId = ("-".join([str(x) for x in [
        hostname,
        devicename,
        workgroup[0],
        workgroup[1]
    ]]))
    plotPath = path(config.RESULTS, config.ID, "kernel", plotId + ".png")

    # Plot title.
    title = ("Work group size: [{c} x {r}]. {hostname} {device}"
             .format(c=workgroup[0], r=workgroup[1],
                     hostname=hostname, device=devicename))

    # Plot caption.
    caption = "Average {n:.1f} iterations.".format(n=iterations)

    # Datapoints:

    Y   = [x[0] for x in speedups]
    Err = [x[1] for x in speedups]

    # Create xtick labels.
    Labels = []
    for i in range(len(harnesses)):
        border = borders[i]
        is_complex = complexities[i]
        label = "\\textbf{" if is_complex else ""
        label += "[{0}]".format(" ".join([str(x) for x in border]))
        if is_complex: label += "}"
        Labels.append(label)

    # Keyword arguments to speedup.
    kwargs = {
        "title":     title,
        "xlabel":    "Border size and kernel complexity",
        "labels":    Labels,
        "err":       Err,
        "caption":   caption,
        "path":      plotPath
    }

    plt.speedups(Y, **kwargs)

# Plot speedups of work group size and kernel type for a fixed device.
def plotSpeedupsForDevice(groups):
    # Workgroup sizes
    wgVars = [getworkgroupsize(x[0].testcase.invars) for x in groups]
    wgSizes = [(x[0].val, x[1].val) for x in wgVars]

    # Constants across all harnesses:

    hostname = lookup1(groups[0][0].testcase.invars, Hostname).val
    devicename = humanReadableDeviceString(groups[0][0].testcase.invars)

    # Constants across all groups:

    borders = [lookup1(x.testcase.invars, BorderSize).val for x in groups[0]]
    complexities = [lookup1(x.testcase.invars, "Complexity").val for x in groups[0]]

    # Flatten grid data into a list:
    speedups = []
    for harnesses in groups:
        speedups += [lookup1(x.result().couts, Speedup).val for x in harnesses]

    iterations = sum([x[2] for x in speedups]) / len(speedups)

    # Unique plot ID.
    plotId = ("-".join([str(x) for x in [
        hostname,
        devicename
    ]]))
    plotPath = path(config.RESULTS, config.ID, "wg-kernel", plotId + ".png")

    # Plot title.
    title = "{hostname} {device}".format(hostname=hostname, device=devicename)

    # Plot caption.
    caption = "Average {n:.1f} iterations.".format(n=iterations)

    # Datapoints:

    Y   = [x[0] for x in speedups]

    # Create xtick labels.
    Xlabels = []
    for i in range(len(borders)):
        border = borders[i]
        is_complex = complexities[i]
        label = "\\textbf{" if is_complex else ""
        label += "[{0}]".format(" ".join([str(x) for x in border]))
        if is_complex: label += "}"
        Xlabels.append(label)

    Ylabels = ["[{c} x {r}]".format(c=x[0], r=x[1]) for x in wgSizes]

    # Keyword arguments to speedup.
    kwargs = {
        "surface":   False, # Surface or bar plot.
        "title":     title,
        "xlabel":    "",#"Border size and kernel complexity",
        "ylabel":    "",#"Work group size",
        "zlabel":    "Speedup",
        "xlabels":   Xlabels,
        "ylabels":   Ylabels,
        "caption":   caption,
        "path":      plotPath,
    }

    plt.speedups3d(Y, len(groups[0]), **kwargs)

# Plot speedups of work group sizes for each a fixed device and kernel.
def plotSpeedupsForDeviceAndKernel(harnesses):   
    # Workgroup sizes
    wgVars = [getworkgroupsize(x.testcase.invars) for x in harnesses]
    wgSizes = [(x[0].val, x[1].val) for x in wgVars]

    # Constants across all harnesses:

    hostname = lookup1(harnesses[0].testcase.invars, Hostname).val
    devicename = humanReadableDeviceString(harnesses[0].testcase.invars)
    border = lookup1(harnesses[0].testcase.invars, BorderSize).val
    complexity = lookup1(harnesses[0].testcase.invars, "Complexity").val

    kernelString = "[{0}]".format(",".join([str(x) for x in border]))
    if complexity: kernelString += "c"
    
    # Get X,Y cordinate ranges values
    Xvals, Yvals = [], []
    for x in wgSizes:
        if x[0] not in Xvals: Xvals.append(x[0])
        if x[1] not in Yvals: Yvals.append(x[1])
    Xvals = list(reversed(sorted(Xvals)))
    Yvals = list(sorted(Yvals))

    # Create empty data list:
    speedups = [(0, 0, 0) for i in range(len(Xvals) * len(Yvals))]
    # Populate data:
    for i in range(len(harnesses)):
        # Get harness and work group size
        harness = harnesses[i]
        wg = wgSizes[i]

        # Calculate x,y position and 1D array index
        x, y = Xvals.index(wg[0]), Yvals.index(wg[1])
        index = y * len(Xvals) + x

        # Add speedup
        speedups[index] = lookup1(harness.result().couts, Speedup).val

    iterations = sum([x[2] for x in speedups]) / len(speedups)

    # Unique plot ID.
    plotId = kernelString
    plotPath = path(config.RESULTS, config.ID, "wg",
                    hostname + "-" + devicename, plotId + ".png")

    # Plot title.
    title = ("{hostname} {device} {kernel}"
             .format(hostname=hostname, device=devicename, kernel=kernelString))

    # Plot caption.
    caption = "Average {n:.1f} iterations.".format(n=iterations)

    # Datapoints:

    Y   = [x[0] for x in speedups]

    # Create xtick labels.
    Xlabels = Xvals
    Ylabels = Yvals

    # Keyword arguments to speedup.
    kwargs = {
        "surface":   False, # Surface or bar plot.
        "title":     title,
        "xlabel":    "Work group size (C)",
        "ylabel":    "Work group size (R)",
        "zlabel":    "Speedup",
        "xlabels":   Xlabels,
        "ylabels":   Ylabels,
        "caption":   caption,
        "path":      plotPath,
    }

    plt.speedups3d(Y, len(Xvals), **kwargs)
    
# Preprocess data: Add derived speedups over default work group sizes.
for harness in HARNESSES:
    result = harness.result()
    invars = result.invars

    # Get the baseline result.
    baselineinvars = setworkgroupsize(invars,
                                      StencilLocalSizeC(StencilLocalSizeC.DEFAULT),
                                      StencilLocalSizeR(StencilLocalSizeR.DEFAULT))
    baseline = resultscache.load(baselineinvars)

    if (baseline.bad or result.bad or
        not len(baseline.outvars) or not len(result.outvars)):
        # If we are missing data, speedup = 0.
        speedup = 0
        err = 0
    else:
        # Else, speedup = Tb / Tc
        time = gettime(result)
        baselinetime = gettime(baseline)
        speedup = baselinetime[0] / time[0]
        err = abs((baselinetime[0] / sum(time)) - speedup)
    # Average number of iterations.
    iterations = sum([len(result.outvars), len(baseline.outvars)]) / 2
    # Add Speedup cout variable.
    result.couts.add(Speedup((speedup, err, iterations)))

# Group harnesses by Host/Device properties.
deviceGrouped = groupByInvars(HARNESSES, Hostname, DeviceTypeArg,
                                 DeviceCountArg, "Size").values()

# Iterate over groups.
for deviceGroup in deviceGrouped:
    # Group harnesses by work group size.
    wgGrouped = groupByInvars(deviceGroup,
                              StencilLocalSizeC,
                              StencilLocalSizeR).values()
    # Plot speedups of work group sizes and kernels for each device.
    plotSpeedupsForDevice(wgGrouped)

    # Plot speedups of kernels for each device and work group size.
    [plotSpeedupsForDeviceAndWorkGroup(x) for x in wgGrouped]

    # Group harnesses by kernel type.
    kGrouped = groupByInvars(deviceGroup,
                             BorderSize,
                             "Complexity").values()
    
    # Plot speedups of work group sizes for each device and kernel.
    [plotSpeedupsForDeviceAndKernel(x) for x in kGrouped]

# Graph event times.
[plt.openCLEventTimes(x.testcase.invars) for x in HARNESSES]

exit(0)
