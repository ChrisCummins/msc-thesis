#!/usr/bin/env python2.7
#
# e5
#
from __future__ import print_function
from itertools import product

from benchlib import *
from skelcl import *
from util import *

def testMapOverlapVsStencil():
    def _instantiate(host, benchmark, args, knobs):
        sampler = FixedSizeSampler(10)
        harnesses = []

        for devargs in host.devargs():
            mo = [Argument("MapOverlap", "--map-overlap")]
            c1 = SkelCLTestCase(benchmark, host=host,
                                invars=knobs + args + devargs)
            c2 = SkelCLTestCase(benchmark, host=host,
                                invars=knobs + args + mo + devargs)

            harnesses += [TestHarness(c, sampler) for c in [c1, c2]]

        return harnesses

    return enumerate({
        "hosts": [ "florence", "cec", "dhcp-90-060", "whz5", "tim", "monza" ],
        "benchmarks": {
            "CannyEdgeDetection": {
                "args": {
                    "Input": ["--input {base}/{file}".format(base=IMG, file="4160x3120.pgm")]
                }
            },
            "GameOfLife": {
                "args": {
                    "Iterations": ["-i {i}".format(i=i) for i in range(1, 11)]
                }
            },
            "GaussianBlur": {
                "args": {
                    "Input": ["--input {base}/{file}".format(base=IMG, file="4160x3120.pgm")]
                }
            },
            "HeatEquation": {
                "args": {
                    "Iterations": ["-i {i}".format(i=i)
                                   for i in [1, 2, 3, 4, 5, 10, 50, 100, 250]]
                }
            }
        },
        "args": {},
        "knobs": {}
    }, _instantiate)

def testStencilLocalSize():
    def _instantiate(host, benchmark, args, knobs):
        sampler = FixedSizeSampler(10)
        harnesses = []

        for devargs in host.devargs():
            c = SkelCLTestCase(benchmark, host=host,
                               invars=knobs + args + devargs)
            harnesses.append(TestHarness(c, sampler))

        return harnesses

    return enumerate({
        "hosts": [ "florence", "cec", "dhcp-90-060", "whz5", "tim", "monza" ],
        "benchmarks": {
            "CannyEdgeDetection": {
                "args": {
                    "Input": ["--input {base}/{file}".format(base=IMG, file="4160x3120.pgm")]
                }
            },
            "GameOfLife": {
                "args": {
                    "Iterations": ["-i {i}".format(i=i) for i in [5, 10, 50]]
                }
            },
            "GaussianBlur": {
                "args": {
                    "Input": ["--input {base}/{file}".format(base=IMG, file="4160x3120.pgm")]
                }
            },
            "HeatEquation": {
                "args": {
                    "Iterations": ["-i {i}".format(i=i)
                                   for i in [5, 10, 50]]
                }
            },
            "FDTD": {
                "args": {}
            }
        },
        "args": {},
        "knobs": {
            StencilLocalSizeC: [4, 8, 16, 32, 64, 128, 256],
            StencilLocalSizeR: [4, 8, 16, 32, 64, 128, 256]
        }
    }, _instantiate)

def testAllPairs():
    def _instantiate(host, benchmark, args, knobs):
        sampler = FixedSizeSampler(10)
        harnesses = []

        for devargs in host.devargs():
            c = SkelCLTestCase(benchmark, host=host,
                               invars=knobs + args + devargs)
            harnesses.append(TestHarness(c, sampler))

        return harnesses

    return enumerate({
        "hosts": [ "florence", "cec", "dhcp-90-060", "whz5", "tim", "monza" ],
        "benchmarks": {
            "MatrixMultiply": {
                "args": {
                    "Size": ["--row-count-a {a} --col-count-b {b} --col-count-b {a}"
                             .format(a=x[0], b=x[1]) for x in [
                                 [4096, 4096],
                                 [2048, 4096]]
                         ]
                }
            }
        },
        "args": {},
        "knobs": {
            AllPairsC: [16, 32, 64, 128, 256],
            AllPairsR: [16, 32, 64, 128, 256],
            AllPairsS: [16, 32, 64, 128, 256]
        }
    }, _instantiate)

def testrun():
    def _instantiate(host, benchmark, args, knobs):
        sampler = FixedSizeSampler(5)
        return [TestHarness(SkelCLTestCase(benchmark, host=host,
                                           invars=knobs + args + x),
                            sampler)
                for x in host.devargs()]

    return enumerate({
        "hosts": [ "florence", "cec", "dhcp-90-060", "whz5", "tim", "monza" ],
        "benchmarks": {
            "GameOfLife": {
                "args": {
                    "Iterations": ["-i 10"]
                }
            }
        },
        "args": {},
        "knobs": {}
    }, _instantiate)

harnesses = testStencilLocalSize() + testAllPairs() + testrun() + testMapOverlapVsStencil()

q = jobqueue(harnesses)

runJobQueue(q)

# Headless servers stop here.
if not masterhost(): exit(0)

####### DATA PROCESSING

import plot as plt

# Graph event times.
[plt.openCLEventTimes(x.testcase.invars) for x in harnesses]

exit(0)
