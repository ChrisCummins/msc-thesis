#!/usr/bin/env python2.7
#
# e5
#
from __future__ import print_function
from itertools import product
from sys import exit

from benchlib import *
from skelcl import *

def testMapOverlapVsStencil():
    def _instantiate(host, benchmark, args, knobs):
        sampler = FixedSizeSampler(10)
        harnesses = []

        for devargs in host.devargs():
            mo = [Argument("MapOverlap", "--map-overlap")]
            c1 = SkelCLTestCase(benchmark, host=host,
                                invars=knobs + args + devargs)
            c2 = SkelCLTestCase(benchmark, host=host,
                                invars=knobs + args + mo + devargs)

            harnesses += [TestHarness(c, sampler) for c in [c1, c2]]

        return harnesses

    return enumerate({
        "hosts": [ "florence", "cec", "dhcp-90-060", "whz5", "tim", "monza" ],
        "benchmarks": {
            "CannyEdgeDetection": {
                "args": {}
            },
            "GameOfLife": {
                "args": {
                    "Iterations": ["-i {i}".format(i=i) for i in range(1, 11)]
                }
            },
            "GaussianBlur": {
                "args": {}
            },
            "HeatEquation": {
                "args": { "Iterations": [1, 5, 10, 50, 100, 250] }
            }
        },
        "args": {},
        "knobs": {}
    }, _instantiate)

def testrun():
    def _instantiate(host, benchmark, args, knobs):
        sampler = FixedSizeSampler(12)
        return [TestHarness(SkelCLTestCase(benchmark, host=host,
                                           invars=knobs + args + x))
                for x in host.devargs()]

    return enumerate({
        "hosts": [ "florence", "cec", "dhcp-90-060", "whz5", "tim", "monza" ],
        "benchmarks": {
            "GameOfLife": {
                "args": {
                    "Iterations": ["-i {i}".format(i=i) for i in range(1, 11)]
                }
            }
        },
        "args": {},
        "knobs": {}
    }, _instantiate)

harnesses = testrun() + testMapOverlapVsStencil()

q = jobqueue(harnesses)

runJobQueue(q)
