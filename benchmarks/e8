#!/usr/bin/env python2.7
#
# e6
#
from __future__ import print_function
from itertools import product

from benchlib import *
from skelcl import *
from util import *

jobdesc =  {
    "hosts": [ "florence", "cec", "dhcp-90-060", "whz5", "tim", "monza" ],
    "benchmarks": {
        "GameOfLife": {
            "args": {
                "Size": ["--size {s}".format(s=s) for s in [1024, 2048]],
                "Iterations": ["-i {i}".format(i=i) for i in range(1, 55)]
            }
        },
        "HeatEquation": {
            "args": {
                "Size": ["--size {s}".format(s=s) for s in [1024, 2048]],
                "Iterations": ["-i {i}".format(i=i) for i in range(1, 30)]
            }
        }
    },
    "args": {},
    "knobs": {}
}

def instantiate(host, benchmark, args, knobs):
    sampler = FixedSizeSampler(5)
    harnesses = []

    for devargs in host.devargs():
        mo = [Argument("MapOverlap", "--map-overlap")]
        c1 = SkelCLTestCase(benchmark, host=host,
                            invars=knobs + args + devargs)
        c2 = SkelCLTestCase(benchmark, host=host,
                            invars=knobs + args + mo + devargs)

        harnesses += [TestHarness(c, sampler) for c in [c1, c2]]

    return harnesses

def mapOverlapVsStencil():
    return enumerate(jobdesc, instantiate)

HARNESSES = mapOverlapVsStencil()

q = jobqueue(HARNESSES)

runJobQueue(q)

# Headless servers stop here.
if not masterhost(): exit(0)

####### DATA PROCESSING

from re import sub

from stats import *

import plot as plt

# Graph event times.
[plt.openCLEventTimes(x.testcase.invars) for x in HARNESSES]

def compareStencilMapOverlap(host, benchmark, devargs, iterations, size=4096):
    #
    def _print(host, benchmark, size, devargs, speedups, i):
        dt = "GPU" if search("GPU", lookup1(devargs, DeviceTypeArg).val) else "CPU"
        if dt == "GPU":
            dt = "{n}x ".format(n=search('([0-9]+)', lookup1(devargs, DeviceCountArg).val).group(1)) + dt

        benchmarkstr = "{b} ({s})".format(b=benchmark.name, s=size)

        speedupstrs = ["{0:.2f}".format(x) for x in speedups]
        if len(speedups):
            speedupstrs[-1] = "\\textit{{{0}}}".format(speedupstrs[-1])
        if len(speedups) > 4:
            speedupstrs = [speedupstrs[0]] + ["\\ldots"] + speedupstrs[-3:]

        print(' & '.join([str(x) for x in [host.NAME, dt, benchmarkstr, ' '.join(speedupstrs), i]]),
              '\\\\')

    # t[] is a list of tuples, where each tuple represents the
    # total time (minus init) to run a benchmark using stencil
    # (left) and mapoverlap (right).
    t = []
    if size == 4096:
        iterations = iterations[0:4]

    bad = set()

    for i in iterations:
        args = [Argument("Iterations", i)]
        if size != 4096:
            args.append(Argument("Size", "--size {size}".format(size=size)))
        moarg = [Argument("MapOverlap", "--map-overlap")]
        harnesses = [
            TestHarness(SkelCLTestCase(benchmark, host, args + devargs)),
            TestHarness(SkelCLTestCase(benchmark, host, args + moarg + devargs))
        ]

        stencil = harnesses[0].result()
        mo = harnesses[1].result()

        bad.add(stencil.bad)
        bad.add(mo.bad)

        stenciltimes = summarise(*gettimes(stencil.outvars))
        motimes = summarise(*gettimes(mo.outvars))

        stenciltotal = sum([x[1][0] for x in stenciltimes[1:]])
        mototal = sum([x[1][0] for x in motimes[1:]])

        if stenciltotal == 0 or mototal == 0:
            bad.add(True)
            break

        t.append((stenciltotal, mototal))

    # Test whether we have data.
    if all(x[0] == 0 and x[1] == 0 for x in t):
        return
    # Test whether data is bad.
    if True in bad:
        _print(host, benchmark, size, devargs, [], "-")

    speedups = []
    i = 0
    while i < len(t):
        st = t[i][0]
        mt = t[i][1]

        try:
            speedups.append(st / mt)
        except ZeroDivisionError:
            print(host.NAME, size, devargs)
            print(t)
            exit(10)

        i += 1
        if mt > st:
            break

    _print(host, benchmark, size, devargs, speedups, i)


# Table of
for h in jobdesc["hosts"]:
    host = SkelCLHost.create(h)
    for b in jobdesc["benchmarks"]:
        benchmark = SkelCLBenchmark(b)
        for devargs in host.devargs():
            for s in jobdesc["benchmarks"][b]["args"]["Size"]:
                compareStencilMapOverlap(host, benchmark, devargs,
                                         jobdesc["benchmarks"][b]["args"]["Iterations"],
                                         size=int(sub("--size ", "", s)))
            compareStencilMapOverlap(host, benchmark, devargs, # size = 4096, from e7
                                     jobdesc["benchmarks"][b]["args"]["Iterations"])

exit(0)
