#!/usr/bin/env python2.7
#
# e8
#
from __future__ import print_function
from itertools import product

from benchlib import *
from skelcl import *
from util import *

import config

jobdesc =  {
    "hosts": [ "florence", "cec", "dhcp-90-060", "whz5", "tim", "monza" ],
    "benchmarks": {
        "GameOfLife": {
            "args": {
                "Size": ["--size {s}".format(s=s) for s in [1024, 2048]],
                "Iterations": ["-i {i}".format(i=i) for i in range(1, 100)]
            }
        },
        "HeatEquation": {
            "args": {
                "Size": ["--size {s}".format(s=s) for s in [1024, 2048]],
                "Iterations": ["-i {i}".format(i=i) for i in range(1, 100)]
            }
        }
    },
    "args": {},
    "knobs": {}
}

# jobdesc =  {
#     "hosts": [ "florence", "cec", "dhcp-90-060", "whz5", "tim", "monza" ],
#     "benchmarks": {
#         "GameOfLife": {
#             "args": {
#                 "Size": ["--size {s}".format(s=s) for s in [8192]],
#                 "Iterations": ["-i {i}".format(i=i) for i in range(1, 6)]
#             }
#         },
#         "HeatEquation": {
#             "args": {
#                 "Size": ["--size {s}".format(s=s) for s in [8192]],
#                 "Iterations": ["-i {i}".format(i=i) for i in range(1, 6)]
#             }
#         }
#     },
#     "args": {},
#     "knobs": {}
# }

def instantiate(host, benchmark, args, knobs):
    sampler = FixedSizeSampler(5)
    harnesses = []

    for devargs in host.devargs():
        mo = [Argument("MapOverlap", "--map-overlap")]
        c1 = SkelCLTestCase(benchmark, host=host,
                            invars=knobs + args + devargs)
        c2 = SkelCLTestCase(benchmark, host=host,
                            invars=knobs + args + mo + devargs)

        harnesses += [TestHarness(c, sampler) for c in [c1, c2]]

    return harnesses

def mapOverlapVsStencil():
    return enumerateHarnesses(jobdesc, instantiate)

HARNESSES = mapOverlapVsStencil()

q = jobqueue(HARNESSES)

runJobQueue(q)

# Headless servers stop here.
if not masterhost(): exit(0)

####### DATA PROCESSING

from re import sub

from stats import *

import plot as plt

#
def visualise(host, benchmark, size, devargs, speedups, tableFile):
    # Check we have something to do.
    if speedups == None:
        return

    def table(file):
        def breakEvenIndex(speedups):
            for i in range(len(speedups)):
                if speedups[i][0] < 1:
                    return i + 1
            return -1

        if len(speedups) > 1:
            be = breakEvenIndex(speedups)
            positiveSpeedups = speedups[:be]
            if be < 0:
                be = "> " + str(len(speedups) + 1)

            speedupstrs = ["{0:.2f}".format(x[0]) for x in positiveSpeedups]
            speedupstrs[-1] = "\\textit{{{0}}}".format(speedupstrs[-1])
            if len(positiveSpeedups) > 4:
                speedupstrs = [speedupstrs[0]] + ["\\ldots"] + speedupstrs[-3:]

        else:
            speedupstrs = []
            be = "-"

        print(' & '.join([str(x) for x in [host.NAME, dt,
                                           benchmark.name,
                                           size,
                                           ' '.join(speedupstrs),
                                           be]]), '\\\\',
              file=file)

    dt = "GPU" if search("GPU", lookup1(devargs, DeviceTypeArg).val) else "CPU"
    if dt == "GPU":
        dt = "{n}x ".format(n=search('([0-9]+)', lookup1(devargs, DeviceCountArg).val).group(1)) + dt

    table(tableFile)

    if len(speedups) > 4:
        name = "{host}-{dev}-{app}-{size}".format(
            host=host.NAME,
            dev=sub(" ", "", dt),
            app=benchmark.name,
            size=size
        )

        MAX_DATAPOINTS = 50
        if len(speedups) > MAX_DATAPOINTS and speedups[MAX_DATAPOINTS][0] > 1:
            MAX_DATAPOINTS = len(speedups)

        kwargs = {
            "title": "MapOverlap vs Stencil: " + ", ".join([str(x) for x in [
                host.NAME,
                dt,
                "{benchmark} ({size})".format(benchmark=benchmark.name, size=size)
            ]]),
            "xlabel": "Iterations",
            "err": [x[1] for x in speedups][:MAX_DATAPOINTS],
            "path": path(config.RESULTS, config.ID, name + ".png")
        }

        plt.speedups([x[0] for x in speedups][:MAX_DATAPOINTS], **kwargs)

def speedupsMapOverlapStencil(host, benchmark, devargs, iterations, size=4096):
    speedups = []

    bad = False

    for i in iterations:
        args = [Argument("Iterations", i)]
        if size != 4096:
            args.append(Argument("Size", "--size {size}".format(size=size)))
        moarg = [Argument("MapOverlap", "--map-overlap")]
        harnesses = [
            TestHarness(SkelCLTestCase(benchmark, host, args + devargs)),
            TestHarness(SkelCLTestCase(benchmark, host, args + moarg + devargs))
        ]

        stencil = harnesses[0].result()
        mo = harnesses[1].result()

        if not len(stencil.outvars) and not len(mo.outvars):
            # We have run out of data.
            if len(speedups):
                break
            # We have no data.
            return

        if stencil.bad or mo.bad:
            bad = True
            break

        stenciltimes = [lookup1(x, ElapsedTimes).val[0] for x in stencil.outvars]
        motimes = [lookup1(x, ElapsedTimes).val[0] for x in mo.outvars]

        stenciltotal = describe(stenciltimes)[0]
        stencilerr = describe(stenciltimes)[1]
        mototal = describe(motimes)[0]

        #print("STENCIL", stencil.invars, resultscache.resultspath(stencil.invars))
        #print("MO", mo.invars, resultscache.resultspath(mo.invars))
        
        # We have bad data.
        if (bool(stenciltotal == 0) != bool(mototal == 0)):
            bad = True
            break

        speedup = stenciltotal / mototal
        err = ((stenciltotal + stencilerr) / mototal) - speedup

        speedups.append((speedup, err))
        
    if bad:
        return speedups
    else:
        return speedups

tableFile = mkopen(path(config.RESULTS, config.ID, "MapOverlapVsStencilSpeedups.tex"), "w")

print("\\begin{tabular}{| l | l | l | l | l | l |}\n\\hline\n\\textbf{Host} & \\textbf{Devices} & \\textbf{Application} & \\textbf{Data Size} & \\textbf{Speedups} & \\textbf{Break-even point}\\\\\n\\hline", file=tableFile)

allspeedups = []

# Create table and visualisations
for h in jobdesc["hosts"]:
    host = SkelCLHost.create(h)
    for b in jobdesc["benchmarks"]:
        benchmark = SkelCLBenchmark(b)
        for devargs in host.devargs():
            for s in jobdesc["benchmarks"][b]["args"]["Size"]:
                size = int(sub("--size ", "", s))
                speedups = speedupsMapOverlapStencil(host, benchmark, devargs,
                                                     jobdesc["benchmarks"][b]["args"]["Iterations"],
                                                     size=size)
                if speedups: allspeedups += speedups
                visualise(host, benchmark, size, devargs, speedups, tableFile)
            speedups = speedupsMapOverlapStencil(host, benchmark, devargs,
                                                 jobdesc["benchmarks"][b]["args"]["Iterations"])
            if speedups: allspeedups += speedups
            visualise(host, benchmark, 4096, devargs, speedups, tableFile)

allpositivespeedups = [x[0] for x in allspeedups if x[0] >= 1]
print("AVERAGE SPEEDUP:", sum(allpositivespeedups) / len(allpositivespeedups),
      "NUMBER OF SPEEDUPS:", len(allpositivespeedups))

print("\\hline\n\\end{tabular}", file=tableFile)
print("Wrote {path}...".format(path=tableFile.name))
tableFile.close()

# Graph event times.
[plt.openCLEventTimes(x.testcase.invars) for x in HARNESSES]

exit(0)
