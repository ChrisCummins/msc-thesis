#!/usr/bin/env python2.7

from __future__ import print_function
from operator import itemgetter
from re import sub
from sys import exit
import os

from benchlib import *

pow2range = [2 ** x for x in range(10, 14)]
knobrange = [2 ** x for x in range(3, 7)]

def pre_exec_hook(settings):
    cd(CWD)
    os.system("sed -r -i 's/(define KNOB_C) [0-9]+/\\1 {0}/' ../skelcl/include/SkelCL/detail/AllPairsDef.h"
              .format(settings['c']))
    os.system("sed -r -i 's/(define KNOB_R) [0-9]+/\\1 {0}/' ../skelcl/include/SkelCL/detail/AllPairsDef.h"
              .format(settings['r']))
    os.system("sed -r -i 's/(define KNOB_S) [0-9]+/\\1 {0}/' ../skelcl/include/SkelCL/detail/AllPairsDef.h"
              .format(settings['s']))

    os.system("sed -r -i 's/(define GENERIC_KNOB_C) [0-9]+/\\1 {0}/' ../skelcl/include/SkelCL/detail/AllPairsDef.h"
              .format(settings['c']))
    os.system("sed -r -i 's/(define GENERIC_KNOB_R) [0-9]+/\\1 {0}/' ../skelcl/include/SkelCL/detail/AllPairsDef.h"
              .format(settings['r']))
    os.system("sed -r -i 's/(define GENERIC_KNOB_S) [0-9]+/\\1 {0}/' ../skelcl/include/SkelCL/detail/AllPairsDef.h"
              .format(settings['s']))

    os.system('make -C ../skelcl/build/examples/MatrixMultiply &>/dev/null')

experiment = {
    'have_data': True,
    'name': 'e2',
    'iterations': 10 - 1,
    'settings': {
        'c': knobrange,
        'r': knobrange,
        's': knobrange
    },
    'pre-exec-hook': pre_exec_hook,
    'progs': {
        'MatrixMultiply': [
            ['-i 10'],
            #['', '--generic-kernel'],
            ['--row_count_A {0}'.format(x) for x in pow2range],
            ['--col_count_A {0}'.format(x) for x in pow2range],
            ['--col_count_B {0}'.format(x) for x in pow2range]
        ]
    }
}

if ID() != "cec":
    for prog in experiment['progs']:
        experiment['progs'][prog].append(['--device-type GPU'])

# GATHER DATA
if not experiment['have_data']:
    runexperiment(experiment)

attributes = [
    ['device_type', '{CPU,GPU}'],
    ['c', 'NUMERIC'],
    ['r', 'NUMERIC'],
    ['s', 'NUMERIC'],
    ['row_count_a', 'NUMERIC'],
    ['col_count_a', 'NUMERIC'],
    ['col_count_b', 'NUMERIC'],
    ['time', 'NUMERIC']
]
r = []
for settings in settingspermutations(experiment['settings']):
    name = "{0}-{1}".format(experiment['name'],
                            "-".join([str(settings[x]) for x in settings]))
    R = load(name)
    if not R:
        continue

    mm = R['MatrixMultiply']

    for args in mm:
        for id in mm[args]:
            ra = int(search('--row_count_A ([0-9]+)', args).group(1))
            ca = int(search('--col_count_A ([0-9]+)', args).group(1))
            cb = int(search('--col_count_B ([0-9]+)', args).group(1))
            #baseline = mean(load("{0}-32-8-16".format(experiment['name']))[args][id])
            #speedup = baseline / mean(mm[args][id])
            speedup = mean(mm[args][id])

            r.append([['CPU'] if id == "cec" else ['GPU'], # device-type
                      settings['c'], settings['r'], settings['s'], # c/r/s knobs
                      ra, ca, cb, # row/col counts
                      speedup])

json2arff(attributes, r, relation="matrixmultiple",
          file=open(path(RESULTSDIR, experiment['name'],
                         'MatrixMultiply.arff'), 'w'))
