#!/usr/bin/env python2.7
#
# e3 - Reduce skeleton "global size".
#
# An exploration of the performance impact of varying the
# "global_size" constant in the Reduce skeleton implementation.
#
from __future__ import print_function
from operator import itemgetter
from re import sub
from sys import exit
from operator import mul
import os

EXPERIMENT_NAME = os.path.basename(__file__)

gui = True

if gui:
    import numpy as np
    import matplotlib.pyplot as plt

from benchlib import *

# List of machines with GPUs installed.
GPU_IDS = ["dhcp-90-060"]`

# The default parameter values.
BASE = [8192]
BASESTRING = '-'.join([str(x) for x in BASE])

def pre_exec_hook(settings):
    cd(CWD)

    # Set tunable knobs.
    os.system("sed -r -i 's/(define KNOB_GLOBAL_SIZE) [0-9]+/\\1 {0}/' ../skelcl/include/SkelCL/detail/ReduceDef.h"
              .format(settings['gs']))

    # Build benchmarks.
    os.system('make -C ../skelcl/build/examples/DotProduct &>/dev/null')
    os.system('make -C ../skelcl/build/examples/MatrixMultiply &>/dev/null')

experiment = {
    'have_data': False,
    'name': EXPERIMENT_NAME,
    'iterations': 20,
    'settings': {
         # Reduce kernel global size:
        'gs': [512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]
    },
    'pre-exec-hook': pre_exec_hook,
    'progs': {
        'DotProduct': [
            ['--size {0}'.format(x)
             for x in [4194304, 8388608, 16777216, 33554432]]
        ],
        'MatrixMultiply': [
            ['-i 10'],
            ['--row_count_A {0} --col_count_A {0} --col_count_B {0}'.format(x)
             for x in [2048, 4096]]
        ]
    }
}

if ID() in GPU_IDS:
    for prog in experiment['progs']:
        experiment['progs'][prog].append(['--device-type GPU'])

# GATHER DATA
if not experiment['have_data']:
    runexperiment(experiment)

attributes = [
    ['device_type', '{CPU,GPU}'],
    ['size', 'NUMERIC'],
    ['gs', 'NUMERIC'],
    ['program', '{DP,MM}'],
    ['speedup', 'NUMERIC']
]

rr = {}

for prog in experiment['progs']:
    rr[prog] = []

    for settings in settingspermutations(experiment['settings']):
        name = "{0}-{1}".format(experiment['name'],
                                "-".join([str(settings[x]) for x in settings]))
        R = load(name)
        if not R:
            continue

        progresults = R[prog]
        for args in progresults:
            for id in progresults[args]:
                baseline = mean(results(prog, args, id=id,
                                        version="{0}-{1}".format(experiment['name'],
                                                                 BASESTRING)))
                times = progresults[args][id]
                speedups = [float(baseline) / float(x) for x in times]
                err = confinterval(speedups)[1] - mean(speedups)
                speedup = mean(speedups)

                if not baseline:
                    print("ERROR: no baseline found for {0}!"
                          .format('-'.join([str(x) for x in [ra, ca, cb]])))

                d = ['GPU' if id in GPU_IDS else 'CPU', # device-type
                     settings['gs'], # tunable knobs
                     int(search('--row_count_A ([0-9]+)', args).group(1))
                     if prog == 'MatrixMultiply'
                     else int(search('--size ([0-9]+)', args).group(1)), # size
                     speedup]

                rr[prog].append(d + [err, args])

if gui:
    for prog in rr:
        # Plot results for each of the tunable knob values.
        params, sizes, speedups, errs, args = zip(*[([x[1]], x[2], x[-3], x[-2], x[-1])
                                                    for x in rr[prog]])
        fig, ax = plt.subplots()
        xvals = range(len(speedups))
        bars = ax.bar(xvals, speedups, yerr=errs, ecolor='k')

        # FIXME: why the fuck is this offset necessary?
        MAGICOFFSET = 4
        defaultindex = params.index(BASE) + MAGICOFFSET
        greenindexes = [ii + MAGICOFFSET
                        for ii,v in enumerate(speedups) if v > 1.0]

        # Colour the default value red, and the speedup > 1
        # values green.
        for g in greenindexes:
            ax.get_children()[g].set_color('g')
        ax.get_children()[defaultindex].set_color('r')

        ax.set_xlabel('Reduce kernel global size')
        ax.set_ylabel('Speedup')
        ax.set_title(" ".join([prog, args[0]]))
        ax.set_xticks(xvals)
        ax.set_xticklabels(['{0}, {1}'.format(x[0], y) for x,y in zip(params, sizes)],
                           rotation=90, ha='left')
        ax.get_xaxis().set_tick_params(labelsize=6)
        ax.axhline(y=1)

        #imgpath = path(RESULTSDIR, experiment['name'],
        #               'MatrixMultiply-{0}-{1}-{2}.png'.format(i, j, k))

        plt.gcf().subplots_adjust(bottom=0.15)
        #plt.savefig(imgpath)
        plt.show()
        #print("Wrote '{0}'...".format(imgpath))

        plt.close()

# for x in sorted(r):
#     json2arff(attributes, r[x], relation="matrixmultiple",
#             file=open(path(RESULTSDIR, experiment['name'],
#                            'MatrixMultiply-{0}.arff'.format(x)), 'w'))
